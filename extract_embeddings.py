import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' 

import argparse
import numpy as np
import kaldiio
import soundfile as sf
import tensorflow as tf
from tqdm import tqdm

from train_evaluate import create_classifier

from sslforslr.utils.helpers import load_config, load_dataset, load_model

def get_frames(signal):
        signal_length = len(signal)
        frame_length = 20480
        frame_step = 20480

        num_frames = int(1 + np.ceil((signal_length - frame_length) / frame_step))

        zeros = np.zeros((num_frames * frame_length - signal_length))
        signal_padded = np.append(signal, zeros)

        indices_a = np.tile(np.arange(0, frame_length), (num_frames, 1))
        indices_b = np.tile(np.arange(0, num_frames * frame_step, frame_step), (frame_length, 1))
        indices = indices_a + indices_b.T

        frames = signal_padded[indices.astype(np.int32)]
        return frames

def extract_embeddings(input_path, output_path, config_path):
    config, checkpoint_dir, eval_checkpoint_dir = load_config(config_path)
    gens, input_shape, nb_categories = load_dataset(config, eval_checkpoint_dir)
    model = load_model(config, input_shape)

    #scp = kaldiio.load_scp(input_path)
    for line in tqdm(open(input_path)):
        utterance_id, audio_path = line.rstrip().split()

        data, sr = sf.read(audio_path)
        frames = np.expand_dims(get_frames(data), axis=-1)
        embeddings = np.mean(model.predict(frames), axis=0)

        kaldiio.save_ark(output_path,
                         {utterance_id: embeddings},
                         scp=output_path[:-3] + 'scp',
                         append=True)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('input', help='Path to scp file of features generated by Kaldi.')
    parser.add_argument('output', help='Path to output file containing speaker embeddings.')
    parser.add_argument('config', help='Path to model config file.')
    args = parser.parse_args()

    extract_embeddings(args.input, args.output, args.config)
