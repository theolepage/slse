import argparse
import numpy as np
import kaldiio
import tensorflow as tf
from tqdm import tqdm

from sslforslr.utils.helpers import load_config, load_dataset, load_model

BATCH_SIZE = 4096

def extract_batch(file, model, batch, utterance_ids):
    # Prepare TensorFlow batch data
    options = tf.data.Options()
    options.experimental_distribute.auto_shard_policy = tf.data.experimental.AutoShardPolicy.DATA
    x_tf = tf.data.Dataset.from_tensor_slices((np.array(batch)))
    x_tf = x_tf.batch(len(batch))
    x_tf = x_tf.with_options(options)

    # Use model to get features
    embeddings = model.predict(x_tf)
    
    # Write embeddings to output file
    # FIXME: try kaldiio.save_ark('b.ark', {'key': numpy_array})
    for i in range(len(batch)):
        file.write(utterance_ids[i] + ' [ ' + ' '.join(map(str, embeddings[i].flatten().tolist())) + ' ]\n')

def extract_embeddings(input_path, output_path, config_path):
    config, checkpoint_dir, eval_checkpoint_dir = load_config(config_path)

    gens, input_shape, nb_categories = load_dataset(config,
                                                    eval_checkpoint_dir)

    model = load_model(config, input_shape)

    frame_length = config['training']['dataset']['frames']['length']
    num_feats = sum(1 for line in open(input_path))
    pbar = tqdm(total=num_feats)

    f = open(output_path, 'w')
    batch, utterance_ids = [], []
    
    scp = kaldiio.load_scp(input_path)
    for utterance_id in scp:
        data = scp[utterance_id]

        # FIXME: how to pick frame?
        x = np.array([data], dtype=np.float32)[0, 0:frame_length, ...]

        batch.append(x)
        utterance_ids.append(utterance_id)
        if len(batch) == BATCH_SIZE:
            extract_batch(f, model, batch, utterance_ids)
            batch, utterance_ids = [], []
        pbar.update(1)
    
    if len(batch) != 0:
        extract_batch(f, model, batch, utterance_ids)

    f.close()
    pbar.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('input', help='Path to scp file of features generated by Kaldi.')
    parser.add_argument('output', help='Path to output file containing speaker embeddings.')
    parser.add_argument('config', help='Path to model config file.')
    args = parser.parse_args()

    extract_embeddings(args.input, args.output, args.config)
